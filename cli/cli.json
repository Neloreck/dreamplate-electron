{
  "config": {
  },
  "scripts": {
    "help": {
      "exec": "./cli/scripts/print_commands_list.sh",
      "description": "Show help for all custom CLI commands list or only for provided arguments."
    },
    "setup": {
      "exec": "pnpm install",
      "description": "Setup project modules and install dependencies."
    },
    "clean": {
      "exec": "npx rimraf ./target && echo 'Cleaned up target directory.'",
      "description": "Remove project built assets."
    },
    "purge": {
      "exec": [
        "pnpm rimraf ./target",
        "echo 'Dist purged'",
        "pnpm rimraf ./node_modules ./src/node_modules ./src/application/modules/**/node_modules",
        "echo 'Node modules purged'"
      ],
      "description": "Remove project built assets and purge all npm modules."
    },
    "=============================================================================================================": "=",
    "package": {
      "exec": [
        "./run build-assets --packaged",
        "pnpm electron-builder"
      ],
      "description": "Build application package."
    },
    "package:dev": {
      "exec": [
        "./run build-assets:dev --packaged",
        "pnpm electron-builder"
      ],
      "description": "Build application package."
    },
    "package-only": {
      "exec": [
        "pnpm electron-builder --dir"
      ],
      "description": "Build package only without assets step."
    },
    "spin-build-docker": {
      "exec": "./cli/scripts/electron.sh spin-build-docker",
      "description": "Spin up docker instance for cross-platform building."
    },
    "============================================================================================================": "==",
    "electron": {
      "exec":"./cli/scripts/electron.sh start",
      "description": "Start electron app in production mode"
    },
    "build-assets": {
      "exec":"./cli/scripts/webpack.sh build-assets-prod",
      "description": "Build assets in production mode."
    },
    "build-assets:dev": {
      "exec":"./cli/scripts/webpack.sh build-assets-dev",
      "description": "Build assets in dev mode."
    },
    "watch-assets": {
      "exec":"./cli/scripts/webpack.sh watch-assets-prod",
      "description": "Watch assets in production mode."
    },
    "watch-assets:dev": {
      "exec":"./cli/scripts/webpack.sh watch-assets-dev",
      "description": "Watch assets in dev mode."
    },
    "========================================================================================================": "=====",
    "verify": {
      "exec": "./cli/scripts/verify.sh",
      "description": "Run full tests that include unit tests, linting and typechecks."
    },
    "test": {
      "exec": "./cli/scripts/verify.sh jest",
      "description": "Run jest unit tests."
    },
    "lint": {
      "exec": "./cli/scripts/verify.sh lint",
      "description": "Run eslint for project codestyle checking."
    },
    "format": {
      "exec": "./cli/scripts/verify.sh format",
      "description": "Run prettier combined with eslint to format codebase."
    },
    "typecheck": {
      "exec": "./cli/scripts/verify.sh typecheck",
      "description": "Run TS typechecks."
    }
  }
}
